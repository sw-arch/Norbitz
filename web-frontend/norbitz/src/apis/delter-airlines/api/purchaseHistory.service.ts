/**
 * Delter Airlines
 * Documentation for delter airlines
 *
 * OpenAPI spec version: 1.2.1
 * Contact: pdb145@msstate.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PurchaseHistoryService {

    protected basePath = 'https://virtserver.swaggerhub.com/DelterArlines/DelterAirlinesAPI/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns all info  of all users in purchase histor. Will also return total revnue.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public purchasesGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public purchasesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public purchasesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public purchasesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/purchases`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Clears the order history and restores the inventory availability to default quantities
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetDelete(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetDelete(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetDelete(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetDelete(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/reset`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update hte name on a specific ticket
     * 
     * @param newName the purchaser name.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ticketIDNewName(newName: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public ticketIDNewName(newName: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public ticketIDNewName(newName: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public ticketIDNewName(newName: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (newName === null || newName === undefined) {
            throw new Error('Required parameter newName was null or undefined when calling ticketIDNewName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/purchases/tickets/ticketID&name=${encodeURIComponent(String(newName))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete the order of ticket based off user input
     * 
     * @param ticketNumber Id of ticket you want your purchase and flight info for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ticketIDNumber(ticketNumber: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public ticketIDNumber(ticketNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public ticketIDNumber(ticketNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public ticketIDNumber(ticketNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ticketNumber === null || ticketNumber === undefined) {
            throw new Error('Required parameter ticketNumber was null or undefined when calling ticketIDNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/purchases/tickets/${encodeURIComponent(String(ticketNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all info about a user&#39;s purchase based off their ticket ID number
     * 
     * @param ticketNumber Id of ticket you want your purchase and flight info for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ticketNumber(ticketNumber: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public ticketNumber(ticketNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public ticketNumber(ticketNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public ticketNumber(ticketNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ticketNumber === null || ticketNumber === undefined) {
            throw new Error('Required parameter ticketNumber was null or undefined when calling ticketNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/purchases/tickets/${encodeURIComponent(String(ticketNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
