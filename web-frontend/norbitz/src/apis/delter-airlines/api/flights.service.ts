/**
 * Delter Airlines
 * Documentation for delter airlines
 *
 * OpenAPI spec version: 1.1.1
 * Contact: pdb145@msstate.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FlightsService {

    protected basePath = 'https://virtserver.swaggerhub.com/DelterArlines/DelterAirlinesAPI/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns all info about availbile flights
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public flightsGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public flightsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public flightsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public flightsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/flights`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all flights given the query customers input
     * 
     * @param fromLocation the location you are flying from.
     * @param toLocation the location you are flying to.
     * @param startDate the date you are departing.
     * @param endDate the date you are arriving.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fromLocationToLocationStartDateEndDate(fromLocation?: string, toLocation?: string, startDate?: string, endDate?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fromLocationToLocationStartDateEndDate(fromLocation?: string, toLocation?: string, startDate?: string, endDate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fromLocationToLocationStartDateEndDate(fromLocation?: string, toLocation?: string, startDate?: string, endDate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fromLocationToLocationStartDateEndDate(fromLocation?: string, toLocation?: string, startDate?: string, endDate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fromLocation !== undefined) {
            queryParameters = queryParameters.set('fromLocation', <any>fromLocation);
        }
        if (toLocation !== undefined) {
            queryParameters = queryParameters.set('toLocation', <any>toLocation);
        }
        if (startDate !== undefined) {
            queryParameters = queryParameters.set('startDate', <any>startDate);
        }
        if (endDate !== undefined) {
            queryParameters = queryParameters.set('endDate', <any>endDate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Flight-Search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all info about flights departing from a specfic zipcode
     * 
     * @param location the city you are leaving from.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fromlocation(location: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fromlocation(location: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fromlocation(location: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fromlocation(location: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (location === null || location === undefined) {
            throw new Error('Required parameter location was null or undefined when calling fromlocation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/flights/departing/${encodeURIComponent(String(location))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all info about flights arriving from a specific zipcode
     * 
     * @param location the city you want to go to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public tolocation(location: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public tolocation(location: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public tolocation(location: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public tolocation(location: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (location === null || location === undefined) {
            throw new Error('Required parameter location was null or undefined when calling tolocation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/flights/arriving/${encodeURIComponent(String(location))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
