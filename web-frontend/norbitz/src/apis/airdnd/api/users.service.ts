/**
 * AirDND API
 * AirDND's API
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { LocationListings } from '../model/locationListings';
import { Reservation } from '../model/reservation';
import { Review } from '../model/review';
import { Reviews } from '../model/reviews';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UsersService {

    protected basePath = 'https://virtserver.swaggerhub.com/AirDND/AirDND/1.0.1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * add a reservation
     * Adds a reservation in the system
     * @param reservation reservation to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addReservation(reservation: Reservation, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addReservation(reservation: Reservation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addReservation(reservation: Reservation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addReservation(reservation: Reservation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reservation === null || reservation === undefined) {
            throw new Error('Required parameter reservation was null or undefined when calling addReservation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/reservations`,
            reservation,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * adds a review
     * Adds a review of a listing
     * @param review Review to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addReview(review: Review, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addReview(review: Review, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addReview(review: Review, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addReview(review: Review, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (review === null || review === undefined) {
            throw new Error('Required parameter review was null or undefined when calling addReview.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/reviews`,
            review,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * adds a user
     * Adds a user in the system
     * @param user User to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addUser(user: User, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addUser(user: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addUser(user: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addUser(user: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling addUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/users`,
            user,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get a listing
     * get a listing in the system
     * @param listingId Listing Id to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getListing(listingId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getListing(listingId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getListing(listingId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getListing(listingId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (listingId === null || listingId === undefined) {
            throw new Error('Required parameter listingId was null or undefined when calling getListing.');
        }

        let headers = this.defaultHeaders;
        if (listingId !== undefined && listingId !== null) {
            headers = headers.set('listingId', String(listingId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/listings`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get a reservation
     * get a reservation in the system
     * @param reservationId Reservation Id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReservation(reservationId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getReservation(reservationId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getReservation(reservationId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getReservation(reservationId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling getReservation.');
        }

        let headers = this.defaultHeaders;
        if (reservationId !== undefined && reservationId !== null) {
            headers = headers.set('reservationId', String(reservationId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/reservations`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get a review
     * get a review of a listing
     * @param reviewId Review Id to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReview(reviewId: string, observe?: 'body', reportProgress?: boolean): Observable<Review>;
    public getReview(reviewId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Review>>;
    public getReview(reviewId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Review>>;
    public getReview(reviewId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reviewId === null || reviewId === undefined) {
            throw new Error('Required parameter reviewId was null or undefined when calling getReview.');
        }

        let headers = this.defaultHeaders;
        if (reviewId !== undefined && reviewId !== null) {
            headers = headers.set('reviewId', String(reviewId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Review>(`${this.basePath}/reviews`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get a review
     * get a reviews for a listing
     * @param listingId listing Id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReviews(listingId: string, observe?: 'body', reportProgress?: boolean): Observable<Reviews>;
    public getReviews(listingId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Reviews>>;
    public getReviews(listingId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Reviews>>;
    public getReviews(listingId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (listingId === null || listingId === undefined) {
            throw new Error('Required parameter listingId was null or undefined when calling getReviews.');
        }

        let headers = this.defaultHeaders;
        if (listingId !== undefined && listingId !== null) {
            headers = headers.set('listingId', String(listingId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Reviews>(`${this.basePath}/listings/reviews`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get a user
     * get a user from the system
     * @param userId User ID to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsers(userId: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public getUsers(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public getUsers(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public getUsers(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUsers.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<User>(`${this.basePath}/users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * remove a reservation
     * remove a reservation in the system
     * @param reservationId reservation Id to remove
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeReservation(reservationId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeReservation(reservationId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeReservation(reservationId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeReservation(reservationId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling removeReservation.');
        }

        let headers = this.defaultHeaders;
        if (reservationId !== undefined && reservationId !== null) {
            headers = headers.set('reservationId', String(reservationId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/reservations`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * remove a review
     * remove a review of a listing
     * @param reviewId Review Id to remove
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeReview(reviewId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeReview(reviewId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeReview(reviewId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeReview(reviewId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reviewId === null || reviewId === undefined) {
            throw new Error('Required parameter reviewId was null or undefined when calling removeReview.');
        }

        let headers = this.defaultHeaders;
        if (reviewId !== undefined && reviewId !== null) {
            headers = headers.set('reviewId', String(reviewId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/reviews`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * remove a user
     * remove a user in the system
     * @param userId User Id to remove
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeUser(userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeUser(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeUser(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeUser(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling removeUser.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searches listings
     * By passing in the appropriate options, you can search for available listings in the system 
     * @param location pass a location
     * @param startDate has times available after
     * @param endDate has times available before
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchListing(location: string, startDate?: Date, endDate?: Date, observe?: 'body', reportProgress?: boolean): Observable<LocationListings>;
    public searchListing(location: string, startDate?: Date, endDate?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LocationListings>>;
    public searchListing(location: string, startDate?: Date, endDate?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LocationListings>>;
    public searchListing(location: string, startDate?: Date, endDate?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (location === null || location === undefined) {
            throw new Error('Required parameter location was null or undefined when calling searchListing.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (location !== undefined) {
            queryParameters = queryParameters.set('location', <any>location);
        }
        if (startDate !== undefined) {
            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined) {
            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<LocationListings>(`${this.basePath}/listings/locations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update a reservation
     * Updates a reservation in the system
     * @param reservationId Reservation Id to update
     * @param reservation New reservation information
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateReservation(reservationId: string, reservation: Reservation, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateReservation(reservationId: string, reservation: Reservation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateReservation(reservationId: string, reservation: Reservation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateReservation(reservationId: string, reservation: Reservation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling updateReservation.');
        }
        if (reservation === null || reservation === undefined) {
            throw new Error('Required parameter reservation was null or undefined when calling updateReservation.');
        }

        let headers = this.defaultHeaders;
        if (reservationId !== undefined && reservationId !== null) {
            headers = headers.set('reservationId', String(reservationId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/reservations`,
            reservation,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update a review
     * Updates a review of a listing
     * @param review New review information
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateReview(review: Review, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateReview(review: Review, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateReview(review: Review, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateReview(review: Review, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (review === null || review === undefined) {
            throw new Error('Required parameter review was null or undefined when calling updateReview.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/reviews`,
            review,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update a user
     * Updates a user in the system
     * @param userId User Id to update
     * @param user New user information
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUser(userId: string, user: User, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateUser(userId: string, user: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateUser(userId: string, user: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateUser(userId: string, user: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateUser.');
        }
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling updateUser.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/users`,
            user,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
