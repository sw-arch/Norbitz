/**
 * Hilbun Hotels
 * RESTful API for a fictitious hotel chain. Created for a MSU Software Architecture course.
 *
 * OpenAPI spec version: 1.0.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { Reservation } from '../model/reservation';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ReservationService {

    protected basePath = 'https://35.196.7.68:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete reservation by ID
     * For valid response try integer IDs with positive integer value.\\ \\ Negative or non-integer values will generate API errors
     * @param reservationId ID of the reservation that needs to be deleted
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletereservation(reservationId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deletereservation(reservationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deletereservation(reservationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deletereservation(reservationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling deletereservation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/reservation/${encodeURIComponent(String(reservationId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns ALL reservations
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllReservation(observe?: 'body', reportProgress?: boolean): Observable<Array<Reservation>>;
    public getAllReservation(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Reservation>>>;
    public getAllReservation(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Reservation>>>;
    public getAllReservation(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Reservation>>(`${this.basePath}/reservation`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find reservation by ID
     * 
     * @param reservationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getreservationById(reservationId: number, observe?: 'body', reportProgress?: boolean): Observable<Reservation>;
    public getreservationById(reservationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Reservation>>;
    public getreservationById(reservationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Reservation>>;
    public getreservationById(reservationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling getreservationById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Reservation>(`${this.basePath}/reservation/${encodeURIComponent(String(reservationId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Place a reservation for a room
     * 
     * @param body reservation placed for purchasing the room
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public placereservation(body: Reservation, observe?: 'body', reportProgress?: boolean): Observable<Reservation>;
    public placereservation(body: Reservation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Reservation>>;
    public placereservation(body: Reservation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Reservation>>;
    public placereservation(body: Reservation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling placereservation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Reservation>(`${this.basePath}/reservation`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a reservation
     * 
     * @param reservationId ID of room that needs to be fetched
     * @param reservation 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateReservationById(reservationId: number, reservation: Reservation, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateReservationById(reservationId: number, reservation: Reservation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateReservationById(reservationId: number, reservation: Reservation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateReservationById(reservationId: number, reservation: Reservation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling updateReservationById.');
        }
        if (reservation === null || reservation === undefined) {
            throw new Error('Required parameter reservation was null or undefined when calling updateReservationById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/reservation/${encodeURIComponent(String(reservationId))}`,
            reservation,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
